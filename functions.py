import numpy as np
import math

def gen_uform_grid(N, x_s, x_e, y_s, y_e):
    """Generates uniform cartesian grid of points for streamline calculations
    
    Params:
    -------
    N:     float, number of points in each direction
    x_s:   1D array of float, starting point of x
    x_e:   1D array of float, ending point of x
    y_s:   1D array of float, starting point of y
    y_e:   1D array of float, ending point of y
    
    Returns:
    -------
    X,Y    2D array of float, meshgrid
    """
    x = np.linspace(x_s,x_e,N) #1-D array for x
    y = np.linspace(y_s,y_e,N) #1-D array for y
    X, Y = np.meshgrid(x,y)    #generates mesh grid
    
    return X, Y

def vel_uniform_flow(u_inf, alpha, N, X, Y):
    """Generates uniform cartesian flow velocity field
    
    Params:
    ------
    u_inf    float, free stream speed
    alpha    float, angle of attack
    N        float, number of points

    Returns:
    -------
    u,v      1D array of float, x and y velocities
    """

    # computes the freestream velocity field
    u = u_inf * (np.cos((alpha + np.zeros((N, N), dtype=float))))  #d(psi)/dy
    v = u_inf * (np.sin((alpha + np.zeros((N, N), dtype=float)))) #-d(psi)/dx
    return u, v

def sf_uniform_flow(u_inf, alpha, X, Y):
    """Generates uniform cartesian flow stream-function
    
    Params:
    ------
    u_inf    float, free stream speed
    alpha    float, angle of attack

    Returns:
    -------
    psi      2D array of float, streamfunction
    """

    # computes the stream-function
    psi = u_inf * ((Y*np.cos(alpha)) - (X*np.sin(alpha)))

    return psi

def vel_source_sink(strength, xs, ys, X, Y):
    """Returns the cartesian velocity field generated by a source/sink.
    
    Params:
    ------
    strength  float, strength of the source/sink
    xs, ys    1D array of float, coordinates of the source/sink
    X, Y      1D array of float, mesh grid

    Returns:
    -------
    u, v      1D array of float, x and y velocities
    """
    u = strength/(2*np.pi)*(X-xs)/((X-xs)**2+(Y-ys)**2)
    v = strength/(2*np.pi)*(Y-ys)/((X-xs)**2+(Y-ys)**2)
    
    return u, v

def sf_source_sink(strength, xs, ys, X, Y):
    """Returns the cartesian stream-function generated by a source/sink.
    
    Params
    ------
    strength   float, strength of the source/sink
    xs, ys     1D array of float, coordinates of the source/sink
    X, Y       1D array of float, mesh grid

    Returns
    -------
    psi        2D array of float, streamfunction
    """
    psi = strength/(2*math.pi)*np.arctan2((Y-ys), (X-xs))
    
    return psi

def vel_doublet(strength, xd, yd, X, Y):
    """Returns the cartesian velocity field generated by a doublet.
    
    Params:
    ---------
    strength    float, strength of the doublet
    xd, yd      1D array of float, coordinates of the doublet
    X, Y        1D array of float, mesh grid

    Returns:
    -------
    u, v        1D array of float, x and y velocities
    """
    u = - strength/(2*math.pi)*((X-xd)**2-(Y-yd)**2)/((X-xd)**2+(Y-yd)**2)**2
    v = - strength/(2*math.pi)*2*(X-xd)*(Y-yd)/((X-xd)**2+(Y-yd)**2)**2
    
    return u, v

def sf_doublet(strength, xd, yd, X, Y):
    """Returns the cartesian stream-function generated by a doublet.
    
    Params
    ---------
    strength    float, strength of the doublet
    xd, yd      1D array of float, coordinates of the doublet
    X, Y        1D array of float, mesh grid

    Returns
    -------
    psi         2D array of float, streamfunction
    """
    psi = - strength/(2*math.pi)*(Y-yd)/((X-xd)**2+(Y-yd)**2)
    
    return psi

def vel_vortex(strength, xv, yv, X, Y):
    """Returns cartesian velocity field from vortex
    
    Params:
    ------
    strength   float, strength of vortex
    xv, yv   1D array of float, vortex coordinates
    X, Y       1D array of float, meshgrid
    
    Returns
    -------
    u,v         1D array of float, x and y velocities
    """

    u = + strength/(2*math.pi)*(Y-yv)/((X-xv)**2+(Y-yv)**2)
    v = - strength/(2*math.pi)*(X-xv)/((X-xv)**2+(Y-yv)**2)
    
    return u, v

def sf_vortex(strength, xv, yv, X, Y):
    """Returns cartesian stream-function from vortex
    
    Params:
    ------
    strength   float, strength of vortex
    x_v, y_v   1D array of float, vortex coordinates
    X, Y       1D array of float, meshgrid
    
    Returns
    -------
    psi         2D array of float, streamfunction
    """
    
    psi = strength/(4*math.pi)*np.log((X-xv)**2+(Y-yv)**2)

def vel_doublet_cylind(strength, xd, yd, X, Y):
    """Returns the cylindrical velocity field generated by a doublet.
    
    Params:
    ---------
    strength     float, strength of the doublet.
    xd, yd       float, coordinates of the doublet.
    X, Y         2D array of float, mesh grid.
    
    Returns
    --------
    v_r, v_theta 1D array of float, r and theta velocities
    """
    r = np.sqrt((X - xd)**2 + (Y - yd)**2)
    theta = np.arctan(Y/X)
    
    v_r = - strength/(2*math.pi)*((np.cos(theta))/r**2)
    v_theta = - strength/(2*math.pi)*((np.sin(theta))/r**2)
    
    return v_r, v_theta

def sf_doublet_cylind(strength, xd, yd, X, Y):
    """Returns the cylindrical stream-function generated by a doublet
    
    Params:
    ---------
    strength  float, strength of the doublet.
    xd, yd    float, coordinates of the doublet.
    X, Y      2D array of float, mesh grid.
    
    Returns:
    -------
    psi       2D array of float, streamfunction
    """
    r = np.sqrt((X - xd)**2 + (Y - yd)**2)
    theta = np.arctan(Y/X)
    
    psi = - strength/(2*math.pi)*((np.sin(theta))/r)
    
    return psi

def vel_uniform_flow_cylind(u_inf, xd, yd, alpha, N, X, Y):
    """Generates uniform cylindrical flow velocity field
    
    Params:
    ------
    u_inf        float, free stream speed
    alpha        float, angle of attack
    N            float, number of points
    X, Y         2D array of float, mesh grid.
    xd, yd       float, coordinates of the doublet.

    Returns
    -------
    v_r, v_theta 1D array of float, r and theta velocities
    """

    r = np.sqrt((X - xd)**2 + (Y - yd)**2)
    theta = np.arctan(Y/X)
    
    # computes the freestream velocity field
    v_r = u_inf * np.cos(theta - alpha)
    v_theta = - u_inf * np.sin(theta - alpha)
    
    return v_r, v_theta

def sf_uniform_flow_cylind(u_inf, xd, yd, alpha, X, Y):
    """Returns the cylindrical stream-function generated by uniform flow
    
    Params:
    ------
    u_inf    float, free stream speed
    alpha    float, angle of attack
    X, Y     2D array of float, mesh grid.
    xd, yd    float, coordinates of the doublet.

    Returns
    -------
    psi      2D array of float, streamfunction
    """
    r = np.sqrt((X - xd)**2 + (Y - yd)**2)
    theta = np.arctan(Y/X)
    
    psi = u_inf * (((r*np.sin(theta))*np.cos(alpha))\
                   - ((r*np.cos(theta))*np.sin(alpha)))
    
    return psi